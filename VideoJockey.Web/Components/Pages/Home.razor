@page "/"
@using VideoJockey.Core.Interfaces
@using VideoJockey.Core.Entities
@inject IUnitOfWork UnitOfWork
@inject ILogger<Home> Logger

<PageTitle>Dashboard - Video Jockey</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h4" GutterBottom="true">Dashboard</MudText>
    </MudItem>
    
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="pa-4">
            <MudIcon Icon="@Icons.Material.Filled.VideoLibrary" Color="Color.Primary" Style="font-size: 3rem;" />
            <MudText Typo="Typo.h6" Class="mt-2">Total Videos</MudText>
            <MudText Typo="Typo.h3">@_videoCount</MudText>
        </MudPaper>
    </MudItem>
    
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="pa-4">
            <MudIcon Icon="@Icons.Material.Filled.Download" Color="Color.Secondary" Style="font-size: 3rem;" />
            <MudText Typo="Typo.h6" Class="mt-2">Downloads</MudText>
            <MudText Typo="Typo.h3">@_downloadCount</MudText>
        </MudPaper>
    </MudItem>
    
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="pa-4">
            <MudIcon Icon="@Icons.Material.Filled.Category" Color="Color.Tertiary" Style="font-size: 3rem;" />
            <MudText Typo="Typo.h6" Class="mt-2">Genres</MudText>
            <MudText Typo="Typo.h3">@_genreCount</MudText>
        </MudPaper>
    </MudItem>
    
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="pa-4">
            <MudIcon Icon="@Icons.Material.Filled.Label" Color="Color.Info" Style="font-size: 3rem;" />
            <MudText Typo="Typo.h6" Class="mt-2">Tags</MudText>
            <MudText Typo="Typo.h3">@_tagCount</MudText>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h5" GutterBottom="true">Recent Downloads</MudText>
            @if (_recentDownloads.Any())
            {
                <MudSimpleTable Hover="true" Bordered="true" Striped="true">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Artist</th>
                            <th>Status</th>
                            <th>Progress</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var download in _recentDownloads)
                        {
                            <tr>
                                <td>@(download.Title ?? "Unknown")</td>
                                <td>@(download.Artist ?? "Unknown")</td>
                                <td>
                                    <MudChip T="string" Color="@GetStatusColorFromString(download.Status)" Size="Size.Small">
                                        @download.Status
                                    </MudChip>
                                </td>
                                <td>
                                    <MudProgressLinear Color="Color.Primary" Value="@download.Progress" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            }
            else
            {
                <MudText>No recent downloads</MudText>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h5" GutterBottom="true">Quick Actions</MudText>
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Href="/videos/add">
                        Add Video
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Download" FullWidth="true" Href="/downloads/new">
                        New Download
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Upload" FullWidth="true" Href="/import">
                        Import Collection
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Settings" FullWidth="true" Href="/settings">
                        Settings
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private int _videoCount = 0;
    private int _downloadCount = 0;
    private int _genreCount = 0;
    private int _tagCount = 0;
    private List<DownloadQueue> _recentDownloads = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("Loading dashboard data");
            
            // Load counts
            _videoCount = await UnitOfWork.Videos.CountAsync();
            _downloadCount = await UnitOfWork.DownloadQueues.CountAsync(d => d.Status == "Downloading" || d.Status == "Queued");
            _genreCount = await UnitOfWork.Genres.CountAsync();
            _tagCount = await UnitOfWork.Tags.CountAsync();

            // Load recent downloads
            var downloads = await UnitOfWork.DownloadQueues.GetAsync(d =>
                d.Status != "Completed" &&
                d.Status != "Cancelled");
            _recentDownloads = downloads.OrderByDescending(d => d.CreatedAt).Take(5).ToList();
            
            Logger.LogInformation("Dashboard data loaded successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
        }
    }

    private Color GetStatusColorFromString(string status)
    {
        return status switch
        {
            "Pending" => Color.Default,
            "Queued" => Color.Info,
            "Downloading" => Color.Primary,
            "Processing" => Color.Secondary,
            "Completed" => Color.Success,
            "Failed" => Color.Error,
            "Cancelled" => Color.Warning,
            _ => Color.Default
        };
    }
}
