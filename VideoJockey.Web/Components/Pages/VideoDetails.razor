@page "/videos/{VideoId:guid}"
@using MudBlazor
@using VideoJockey.Core.Entities
@using VideoJockey.Services.Interfaces
@using VideoJockey.Web.Components.Dialogs
@using static VideoJockey.Services.Interfaces.IPlaylistService
@inject IVideoService VideoService
@inject IThumbnailService ThumbnailService
@inject ISnackbar Snackbar
@inject IPlaylistService PlaylistService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Video Details - VideoJockey</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-4">
    @if (_isLoading)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
    }
    else if (_video == null)
    {
        <MudAlert Severity="Severity.Warning" Class="mt-4">
            Unable to load the requested video. It may have been removed.
        </MudAlert>
    }
    else
    {
        <MudPaper Class="pa-4" Elevation="1">
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudCard>
                        <MudCardMedia Height="220" Image="@ThumbnailService.GetThumbnailUrl(_video)" />
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@_video.Title</MudText>
                            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">@_video.Artist</MudText>
                            <div class="mt-2">
                                <MudChip T="string" Color="Color.Primary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Today">
                                    @(_video.Year?.ToString() ?? "Unknown year")
                                </MudChip>
                                <MudChip T="string" Color="Color.Secondary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Schedule">
                                    @FormatDuration(_video.Duration)
                                </MudChip>
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="PlayVideo">
                                Play
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.SkipNext" OnClick="PlayNext">
                                Play Next
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Filled.PlaylistAdd" OnClick="AddToQueue">
                                Queue
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" md="8">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudText Typo="Typo.h5">Metadata</MudText>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Edit" OnClick="OpenEditor">
                            Edit
                        </MudButton>
                    </div>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Album</MudText>
                            <MudText>@(_video.Album ?? "—")</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Format</MudText>
                            <MudText>@(_video.Format ?? "—")</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Resolution</MudText>
                            <MudText>@(_video.Resolution ?? "—")</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Bitrate</MudText>
                            <MudText>@(_video.Bitrate?.ToString("N0") ?? "—")</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Imported</MudText>
                            <MudText>@(_video.ImportedAt?.ToLocalTime().ToString("g") ?? "—")</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Last Played</MudText>
                            <MudText>@(_video.LastPlayedAt?.ToLocalTime().ToString("g") ?? "—")</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Description</MudText>
                            <MudText>@(_video.Description ?? "No description available.")</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Genres</MudText>
                            @if (_video.Genres?.Any() == true)
                            {
                                foreach (var genre in _video.Genres)
                                {
                                    <MudChip T="string" Color="Color.Primary" Variant="Variant.Outlined" Class="mr-1 mb-1">@genre.Name</MudChip>
                                }
                            }
                            else
                            {
                                <MudText>—</MudText>
                            }
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Tags</MudText>
                            @if (_video.Tags?.Any() == true)
                            {
                                foreach (var tag in _video.Tags)
                                {
                                    <MudChip T="string" Color="Color.Info" Variant="Variant.Outlined" Class="mr-1 mb-1">@tag.Name</MudChip>
                                }
                            }
                            else
                            {
                                <MudText>—</MudText>
                            }
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid VideoId { get; set; }

    private Video? _video;
    private bool _isLoading = true;
    private PlaylistSession? _playlistSession;

    protected override async Task OnInitializedAsync()
    {
        await LoadVideoAsync();
    }

    private async Task LoadVideoAsync()
    {
        _isLoading = true;
        try
        {
            _video = await VideoService.GetVideoByIdAsync(VideoId);
            if (_video == null)
            {
                Snackbar.Add("Video not found", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load video: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private string FormatDuration(int? seconds)
    {
        if (!seconds.HasValue)
        {
            return "—";
        }

        var duration = TimeSpan.FromSeconds(seconds.Value);
        return duration.TotalHours >= 1
            ? $"{(int)duration.TotalHours}:{duration.Minutes:D2}:{duration.Seconds:D2}"
            : $"{duration.Minutes}:{duration.Seconds:D2}";
    }

    private async Task PlayVideo()
    {
        if (_video == null)
        {
            return;
        }

        var session = await PlaylistService.CreateFromVideosAsync(new List<Guid> { _video.Id });
        Navigation.NavigateTo($"/player?session={session.SessionId}");
    }

    private async Task PlayNext()
    {
        if (_video == null)
        {
            return;
        }

        if (_playlistSession == null)
        {
            _playlistSession = await PlaylistService.CreateFromVideosAsync(new List<Guid> { _video.Id });
            Snackbar.Add("Started new playlist", Severity.Success);
            Navigation.NavigateTo($"/player?session={_playlistSession.SessionId}");
        }
        else
        {
            var currentIndex = _playlistSession.CurrentIndex;
            _playlistSession.Videos.Insert(currentIndex + 1, _video);
            await PlaylistService.UpdateSessionAsync(_playlistSession);
            Snackbar.Add($"'{_video.Title}' will play next", Severity.Success);
        }
    }

    private async Task AddToQueue()
    {
        if (_video == null)
        {
            return;
        }

        if (_playlistSession == null)
        {
            _playlistSession = await PlaylistService.CreateFromVideosAsync(new List<Guid> { _video.Id });
            Snackbar.Add("Started new playlist", Severity.Success);
        }
        else
        {
            await PlaylistService.AddVideosAsync(_playlistSession, new List<Guid> { _video.Id });
            Snackbar.Add($"'{_video.Title}' added to queue", Severity.Success);
        }
    }

    private async Task OpenEditor()
    {
        if (_video == null)
        {
            return;
        }

        var parameters = new DialogParameters
        {
            { nameof(VideoEditorDialog.Video), _video }
        };

        var dialog = await DialogService.ShowAsync<VideoEditorDialog>("Edit Video", parameters, new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Small
        });

        var result = await dialog.Result;
        if (result is { Canceled: false, Data: Video updated })
        {
            _video = updated;
            Snackbar.Add("Video updated", Severity.Success);
        }
    }
}
