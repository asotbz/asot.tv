@page "/videos"
@using VideoJockey.Core.Entities
@using VideoJockey.Core.Interfaces
@using VideoJockey.Web.Components.Shared
@using MudBlazor
@inject IUnitOfWork UnitOfWork
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Videos - VideoJockey</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Class="mb-4">Video Library</MudText>
        </MudItem>
        
        <!-- Search and Filter Bar -->
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="4">
                            <MudTextField @bind-Value="_searchTerm" 
                                        Label="Search" 
                                        Placeholder="Search by title, artist, or album..."
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Search"
                                        OnKeyUp="@(async (e) => { if (e.Key == "Enter") await SearchVideos(); })"
                                        Immediate="false" />
                        </MudItem>
                        <MudItem xs="12" md="2">
                            <MudSelect @bind-Value="_selectedGenre" 
                                     Label="Genre" 
                                     Variant="Variant.Outlined"
                                     AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem Value="@("")">All Genres</MudSelectItem>
                                @foreach (var genre in _genres)
                                {
                                    <MudSelectItem Value="@genre">@genre</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="2">
                            <MudSelect @bind-Value="_selectedYear" 
                                     Label="Year" 
                                     Variant="Variant.Outlined"
                                     AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem Value="@(0)">All Years</MudSelectItem>
                                @foreach (var year in _years)
                                {
                                    <MudSelectItem Value="@year">@year</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="2">
                            <MudSelect @bind-Value="_sortBy" 
                                     Label="Sort By" 
                                     Variant="Variant.Outlined"
                                     AnchorOrigin="Origin.BottomCenter">
                                <MudSelectItem Value="@("DateAdded")">Date Added</MudSelectItem>
                                <MudSelectItem Value="@("Title")">Title</MudSelectItem>
                                <MudSelectItem Value="@("Artist")">Artist</MudSelectItem>
                                <MudSelectItem Value="@("Year")">Year</MudSelectItem>
                                <MudSelectItem Value="@("Duration")">Duration</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="2" Class="d-flex align-center">
                            <MudButton Variant="Variant.Filled" 
                                     Color="Color.Primary" 
                                     OnClick="SearchVideos"
                                     StartIcon="@Icons.Material.Filled.Search"
                                     FullWidth="true">
                                Search
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                    
                    <!-- Active Filters Display -->
                    @if (_activeFilters.Any())
                    {
                        <MudGrid Class="mt-3">
                            <MudItem xs="12">
                                <MudChipSet T="string" AllClosable="true" OnClose="RemoveFilter">
                                    @foreach (var filter in _activeFilters)
                                    {
                                        <MudChip T="string"
                                               Text="@filter.Value"
                                               Icon="@GetFilterIcon(filter.Key)"
                                               Color="Color.Primary"
                                               Variant="Variant.Outlined" />
                                    }
                                    <MudChip T="string"
                                           Text="Clear All"
                                           Icon="@Icons.Material.Filled.Clear"
                                           Color="Color.Error"
                                           Variant="Variant.Filled"
                                           OnClick="ClearFilters" />
                                </MudChipSet>
                            </MudItem>
                        </MudGrid>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <!-- View Toggle and Actions -->
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="6">
                    <MudButtonGroup Variant="Variant.Outlined">
                        <MudIconButton Icon="@Icons.Material.Filled.GridView" 
                                     Color="@(_viewMode == ViewMode.Grid ? Color.Primary : Color.Default)"
                                     OnClick="@(() => _viewMode = ViewMode.Grid)" />
                        <MudIconButton Icon="@Icons.Material.Filled.ViewList" 
                                     Color="@(_viewMode == ViewMode.List ? Color.Primary : Color.Default)"
                                     OnClick="@(() => _viewMode = ViewMode.List)" />
                        <MudIconButton Icon="@Icons.Material.Filled.ViewModule" 
                                     Color="@(_viewMode == ViewMode.Card ? Color.Primary : Color.Default)"
                                     OnClick="@(() => _viewMode = ViewMode.Card)" />
                    </MudButtonGroup>
                </MudItem>
                <MudItem xs="6" Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" 
                             Color="Color.Success" 
                             StartIcon="@Icons.Material.Filled.Add"
                             OnClick="OpenAddVideoDialog">
                        Add Video
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                             Color="Color.Primary" 
                             StartIcon="@Icons.Material.Filled.Download"
                             OnClick="@(() => Navigation.NavigateTo("/downloads"))"
                             Class="ml-2">
                        Downloads
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
        
        <!-- Videos Display -->
        <MudItem xs="12">
            @if (_isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            }
            else if (!_videos.Any())
            {
                <MudCard>
                    <MudCardContent Class="text-center py-8">
                        <MudIcon Icon="@Icons.Material.Filled.VideoLibrary" 
                               Style="font-size: 5rem;" 
                               Color="Color.Default" />
                        <MudText Typo="Typo.h5" Class="mt-4">No Videos Found</MudText>
                        <MudText Typo="Typo.body1" Class="mt-2">
                            @if (string.IsNullOrEmpty(_searchTerm) && string.IsNullOrEmpty(_selectedGenre) && _selectedYear == 0)
                            {
                                <text>Your video library is empty. Start by adding some videos!</text>
                            }
                            else
                            {
                                <text>No videos match your search criteria. Try adjusting your filters.</text>
                            }
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Primary" 
                                 StartIcon="@Icons.Material.Filled.Add"
                                 OnClick="OpenAddVideoDialog"
                                 Class="mt-4">
                            Add Your First Video
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            }
            else
            {
                @switch (_viewMode)
                {
                    case ViewMode.Grid:
                        <MudGrid>
                            @foreach (var video in _videos)
                            {
                                <MudItem xs="12" sm="6" md="4" lg="3">
                                    <MudCard Class="video-card" @onclick="@(() => OpenVideoDetails(video))">
                                        <MudCardMedia Image="@GetThumbnailUrl(video)" Height="200" />
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6" Class="text-truncate">@video.Title</MudText>
                                            <MudText Typo="Typo.body2" Class="text-truncate">@video.Artist</MudText>
                                            <MudText Typo="Typo.caption">@video.Year · @FormatDuration(video.Duration)</MudText>
                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" 
                                                         Color="Color.Primary" 
                                                         Size="Size.Small"
                                                         OnClick="@(() => PlayVideo(video))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                         Color="Color.Default" 
                                                         Size="Size.Small"
                                                         OnClick="@(() => EditVideo(video))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                         Color="Color.Error" 
                                                         Size="Size.Small"
                                                         OnClick="@(async () => await DeleteVideo(video))" />
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                        break;
                        
                    case ViewMode.List:
                        <MudTable Items="@_videos" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_isLoading">
                            <HeaderContent>
                                <MudTh>Title</MudTh>
                                <MudTh>Artist</MudTh>
                                <MudTh>Album</MudTh>
                                <MudTh>Year</MudTh>
                                <MudTh>Duration</MudTh>
                                <MudTh>Format</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Title">@context.Title</MudTd>
                                <MudTd DataLabel="Artist">@context.Artist</MudTd>
                                <MudTd DataLabel="Album">@context.Album</MudTd>
                                <MudTd DataLabel="Year">@context.Year</MudTd>
                                <MudTd DataLabel="Duration">@FormatDuration(context.Duration)</MudTd>
                                <MudTd DataLabel="Format">@context.Format</MudTd>
                                <MudTd DataLabel="Actions">
                                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" 
                                                 Color="Color.Primary" 
                                                 Size="Size.Small"
                                                 OnClick="@(() => PlayVideo(context))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                 Color="Color.Default" 
                                                 Size="Size.Small"
                                                 OnClick="@(() => EditVideo(context))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                 Color="Color.Error" 
                                                 Size="Size.Small"
                                                 OnClick="@(async () => await DeleteVideo(context))" />
                                </MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager />
                            </PagerContent>
                        </MudTable>
                        break;
                        
                    case ViewMode.Card:
                        <MudGrid>
                            @foreach (var video in _videos)
                            {
                                <MudItem xs="12" md="6">
                                    <MudCard>
                                        <MudCardContent>
                                            <MudGrid>
                                                <MudItem xs="4">
                                                    <img src="@GetThumbnailUrl(video)" 
                                                         alt="@video.Title" 
                                                         style="width: 100%; height: auto; border-radius: 4px;" />
                                                </MudItem>
                                                <MudItem xs="8">
                                                    <MudText Typo="Typo.h6">@video.Title</MudText>
                                                    <MudText Typo="Typo.body2">@video.Artist</MudText>
                                                    <MudText Typo="Typo.caption">@video.Album · @video.Year</MudText>
                                                    <MudText Typo="Typo.caption">@FormatDuration(video.Duration) · @video.Format</MudText>
                                                    <div class="mt-2">
                                                        @if (video.Genres?.Any() == true)
                                                        {
                                                            @foreach (var genre in video.Genres.Take(3))
                                                            {
                                                                <MudChip T="string" Size="Size.Small" Color="Color.Primary" Variant="Variant.Text">
                                                                    @genre.Name
                                                                </MudChip>
                                                            }
                                                        }
                                                    </div>
                                                </MudItem>
                                            </MudGrid>
                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudButton Color="Color.Primary" 
                                                     Variant="Variant.Text"
                                                     StartIcon="@Icons.Material.Filled.PlayArrow"
                                                     OnClick="@(() => PlayVideo(video))">
                                                Play
                                            </MudButton>
                                            <MudButton Color="Color.Default" 
                                                     Variant="Variant.Text"
                                                     StartIcon="@Icons.Material.Filled.Edit"
                                                     OnClick="@(() => EditVideo(video))">
                                                Edit
                                            </MudButton>
                                            <MudSpacer />
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                         Color="Color.Error" 
                                                         Size="Size.Small"
                                                         OnClick="@(async () => await DeleteVideo(video))" />
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                        break;
                }
                
                <!-- Pagination -->
                @if (_totalPages > 1)
                {
                    <MudGrid Class="mt-4">
                        <MudItem xs="12" Class="d-flex justify-center">
                            <MudPagination Count="@_totalPages" 
                                         Selected="@_currentPage" 
                                         SelectedChanged="OnPageChanged"
                                         Color="Color.Primary" 
                                         Variant="Variant.Outlined" />
                        </MudItem>
                    </MudGrid>
                }
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .video-card {
        cursor: pointer;
        transition: transform 0.2s;
    }
    
    .video-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }
</style>

@code {
    private enum ViewMode
    {
        Grid,
        List,
        Card
    }
    
    private List<Video> _videos = new();
    private List<string> _genres = new();
    private List<int> _years = new();
    private Dictionary<string, string> _activeFilters = new();
    
    private string _searchTerm = "";
    private string _selectedGenre = "";
    private int _selectedYear = 0;
    private string _sortBy = "DateAdded";
    private ViewMode _viewMode = ViewMode.Grid;
    
    private bool _isLoading = false;
    private int _currentPage = 1;
    private int _pageSize = 24;
    private int _totalPages = 1;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadFilters();
        await SearchVideos();
    }
    
    private async Task LoadFilters()
    {
        // Load distinct genres
        var allVideos = await UnitOfWork.Videos.GetAllAsync();
        _genres = allVideos
            .SelectMany(v => v.Genres?.Select(g => g.Name) ?? Enumerable.Empty<string>())
            .Distinct()
            .OrderBy(g => g)
            .ToList();
        
        // Load distinct years
        _years = allVideos
            .Where(v => v.Year.HasValue)
            .Select(v => v.Year!.Value)
            .Distinct()
            .OrderByDescending(y => y)
            .ToList();
    }
    
    private async Task SearchVideos()
    {
        _isLoading = true;
        _activeFilters.Clear();
        
        try
        {
            // Build query
            var query = await UnitOfWork.Videos.GetAllAsync();
            
            // Apply search term
            if (!string.IsNullOrWhiteSpace(_searchTerm))
            {
                var searchLower = _searchTerm.ToLower();
                query = query.Where(v => 
                    v.Title.ToLower().Contains(searchLower) ||
                    (v.Artist != null && v.Artist.ToLower().Contains(searchLower)) ||
                    (v.Album != null && v.Album.ToLower().Contains(searchLower)));
                _activeFilters["Search"] = _searchTerm;
            }
            
            // Apply genre filter
            if (!string.IsNullOrEmpty(_selectedGenre))
            {
                query = query.Where(v => v.Genres != null && v.Genres.Any(g => g.Name == _selectedGenre));
                _activeFilters["Genre"] = _selectedGenre;
            }
            
            // Apply year filter
            if (_selectedYear > 0)
            {
                query = query.Where(v => v.Year == _selectedYear);
                _activeFilters["Year"] = _selectedYear.ToString();
            }
            
            // Apply sorting
            query = _sortBy switch
            {
                "Title" => query.OrderBy(v => v.Title),
                "Artist" => query.OrderBy(v => v.Artist ?? ""),
                "Year" => query.OrderByDescending(v => v.Year ?? 0),
                "Duration" => query.OrderByDescending(v => v.Duration),
                _ => query.OrderByDescending(v => v.CreatedAt)
            };
            
            // Calculate pagination
            var totalItems = query.Count();
            _totalPages = (int)Math.Ceiling(totalItems / (double)_pageSize);
            
            // Apply pagination
            _videos = query
                .Skip((_currentPage - 1) * _pageSize)
                .Take(_pageSize)
                .ToList();
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private void OnPageChanged(int page)
    {
        _currentPage = page;
        InvokeAsync(SearchVideos);
    }
    
    private void RemoveFilter(MudChip<string> chip)
    {
        var filterKey = _activeFilters.FirstOrDefault(x => x.Value == chip.Text).Key;
        if (filterKey != null)
        {
            switch (filterKey)
            {
                case "Search":
                    _searchTerm = "";
                    break;
                case "Genre":
                    _selectedGenre = "";
                    break;
                case "Year":
                    _selectedYear = 0;
                    break;
            }
            InvokeAsync(SearchVideos);
        }
    }
    
    private void ClearFilters()
    {
        _searchTerm = "";
        _selectedGenre = "";
        _selectedYear = 0;
        InvokeAsync(SearchVideos);
    }
    
    private string GetFilterIcon(string filterType)
    {
        return filterType switch
        {
            "Search" => Icons.Material.Filled.Search,
            "Genre" => Icons.Material.Filled.Category,
            "Year" => Icons.Material.Filled.CalendarMonth,
            _ => Icons.Material.Filled.FilterAlt
        };
    }
    
    private string GetThumbnailUrl(Video video)
    {
        // TODO: Implement actual thumbnail logic
        return video.ThumbnailPath ?? "/images/video-placeholder.png";
    }
    
    private string FormatDuration(int? seconds)
    {
        if (!seconds.HasValue) return "0:00";
        
        var duration = TimeSpan.FromSeconds(seconds.Value);
        if (duration.TotalHours >= 1)
        {
            return $"{(int)duration.TotalHours}:{duration.Minutes:D2}:{duration.Seconds:D2}";
        }
        return $"{duration.Minutes}:{duration.Seconds:D2}";
    }
    
    private async Task OpenAddVideoDialog()
    {
        // TODO: Implement add video dialog
        Navigation.NavigateTo("/downloads");
    }
    
    private void OpenVideoDetails(Video video)
    {
        Navigation.NavigateTo($"/videos/{video.Id}");
    }
    
    private void PlayVideo(Video video)
    {
        // TODO: Implement video playback
        Navigation.NavigateTo($"/player/{video.Id}");
    }
    
    private void EditVideo(Video video)
    {
        Navigation.NavigateTo($"/videos/{video.Id}/edit");
    }
    
    private async Task DeleteVideo(Video video)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Are you sure you want to delete '{video.Title}'?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Video", parameters);
        var result = await dialog.Result;
        
        if (result != null && !result.Canceled)
        {
            try
            {
                await UnitOfWork.Videos.DeleteAsync(video);
                await UnitOfWork.SaveChangesAsync();
                
                // Also delete the file if it exists
                if (!string.IsNullOrEmpty(video.FilePath) && File.Exists(video.FilePath))
                {
                    File.Delete(video.FilePath);
                }
                
                Snackbar.Add($"'{video.Title}' has been deleted", Severity.Success);
                await SearchVideos();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting video: {ex.Message}", Severity.Error);
            }
        }
    }
}