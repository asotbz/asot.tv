@page "/auth/reset-password"
@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ILogger<ResetPassword> Logger

<PageTitle>Choose New Password - VideoJockey</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-6">
    <MudPaper Elevation="4" Class="pa-6">
        <MudText Typo="Typo.h5" Class="mb-2">Set a new password</MudText>
        <MudText Typo="Typo.body2" Class="mb-4">
            Enter a strong password to secure your account.
        </MudText>

        @if (_isComplete)
        {
            <MudAlert Severity="Severity.Success" Elevation="0">
                Your password has been reset. You can now <MudLink Href="/auth/login">sign in</MudLink> with the new password.
            </MudAlert>
        }
        else if (_tokenMissing)
        {
            <MudAlert Severity="Severity.Error" Elevation="0">
                This reset link is invalid or incomplete. Please request a new token.
            </MudAlert>
        }
        else
        {
            <EditForm Model="_model" OnValidSubmit="HandleResetAsync">
                <DataAnnotationsValidator />
                <MudTextField @bind-Value="_model.Password"
                              Label="New password"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Required="true"
                              Disabled="_isProcessing" />
                <MudTextField @bind-Value="_model.ConfirmPassword"
                              Label="Confirm password"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Required="true"
                              Disabled="_isProcessing"
                              Class="mt-4" />
                <MudButton Type="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Disabled="_isProcessing"
                           Class="mt-4"
                           FullWidth="true">
                    @if (_isProcessing)
                    {
                        <MudProgressCircular Indeterminate Size="Size.Small" Class="mr-2" />
                        <span>Updating password...</span>
                    }
                    else
                    {
                        <span>Update password</span>
                    }
                </MudButton>
            </EditForm>
        }
    </MudPaper>
</MudContainer>

@code {
    private readonly ResetPasswordModel _model = new();
    private string? _email;
    private string? _token;
    private bool _tokenMissing;
    private bool _isProcessing;
    private bool _isComplete;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("email", out var emailValue))
        {
            _email = emailValue.ToString();
        }

        if (query.TryGetValue("token", out var tokenValue))
        {
            _token = tokenValue.ToString();
        }

        _tokenMissing = string.IsNullOrWhiteSpace(_email) || string.IsNullOrWhiteSpace(_token);
    }

    private async Task HandleResetAsync()
    {
        if (_tokenMissing || string.IsNullOrWhiteSpace(_email) || string.IsNullOrWhiteSpace(_token))
        {
            Snackbar.Add("Reset token is missing. Request a new one.", Severity.Error);
            return;
        }

        _isProcessing = true;

        try
        {
            var user = await UserManager.FindByEmailAsync(_email!);
            if (user is null)
            {
                Snackbar.Add("Password reset successful.", Severity.Success);
                _isComplete = true;
                return;
            }

            var result = await UserManager.ResetPasswordAsync(user, _token!, _model.Password);
            if (result.Succeeded)
            {
                Snackbar.Add("Password updated successfully.", Severity.Success);
                _isComplete = true;
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    Snackbar.Add(error.Description, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Password reset failed for {Email}", _email);
            Snackbar.Add("Unable to reset the password. Please request a new token.", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private sealed class ResetPasswordModel
    {
        [Required]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long")]
        public string Password { get; set; } = string.Empty;

        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
