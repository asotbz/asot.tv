@page "/auth/login"
@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ILogger<Login> Logger

<PageTitle>Sign In - VideoJockey</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-6">
    <MudPaper Elevation="4" Class="pa-6">
        <MudText Typo="Typo.h5" Class="mb-4">Sign in to VideoJockey</MudText>

        <EditForm Model="_model" OnValidSubmit="HandleLoginAsync">
            <DataAnnotationsValidator />
            <MudAlert Severity="Severity.Error" Visible="ShowLockout" Class="mb-4">
                Your account is temporarily locked due to multiple failed attempts. Please try again later.
            </MudAlert>

            <MudTextField @bind-Value="_model.EmailOrUsername"
                          Label="Email or Username"
                          Variant="Variant.Outlined"
                          Required="true"
                          Immediate="true"
                          Disabled="_isBusy"
                          @ref="_usernameField" />

            <MudTextField @bind-Value="_model.Password"
                          Label="Password"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Required="true"
                          Disabled="_isBusy"
                          Class="mt-4" />

            <MudCheckBox T="bool" @bind-Checked="_model.RememberMe"
                         Label="Remember me"
                         Disabled="_isBusy"
                         Class="mt-3" />

            <MudStack Class="mt-4" Spacing="1">
                <MudButton Type="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Disabled="_isBusy"
                           FullWidth="true">
                    @if (_isBusy)
                    {
                        <MudProgressCircular Indeterminate Size="Size.Small" Class="mr-2" />
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <span>Sign In</span>
                    }
                </MudButton>
                <MudButton Variant="Variant.Text"
                           Color="Color.Secondary"
                           Disabled="_isBusy"
                           Href="/auth/forgot-password"
                           FullWidth="true">
                    Forgot your password?
                </MudButton>
            </MudStack>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private readonly LoginModel _model = new();
    private bool _isBusy;
    private bool ShowLockout { get; set; }
    private string? _returnUrl;
    private MudTextField<string>? _usernameField;

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ParseReturnUrl();

        if (AuthenticationStateTask is not null)
        {
            var state = await AuthenticationStateTask;
            if (state.User.Identity?.IsAuthenticated ?? false)
            {
                Navigation.NavigateTo(GetSafeReturnUrl(), true);
                return;
            }
        }

        await InvokeAsync(async () =>
        {
            if (_usernameField is not null)
            {
                await _usernameField.FocusAsync();
            }
        });
    }

    protected override void OnParametersSet()
    {
        ParseReturnUrl();
    }

    private void ParseReturnUrl()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("returnUrl", out var value))
        {
            _returnUrl = value.ToString();
        }
    }

    private string GetSafeReturnUrl()
    {
        if (string.IsNullOrWhiteSpace(_returnUrl))
        {
            return "/";
        }

        if (Uri.TryCreate(_returnUrl, UriKind.Absolute, out _))
        {
            return "/";
        }

        return _returnUrl.StartsWith('/') ? _returnUrl : $"/{_returnUrl}";
    }

    private async Task HandleLoginAsync()
    {
        _isBusy = true;
        ShowLockout = false;

        try
        {
            var identifier = _model.EmailOrUsername?.Trim();
            if (string.IsNullOrWhiteSpace(identifier))
            {
                Snackbar.Add("Please enter your email or username.", Severity.Warning);
                return;
            }

            var user = await UserManager.FindByNameAsync(identifier) ?? await UserManager.FindByEmailAsync(identifier);
            if (user is null)
            {
                Snackbar.Add("Invalid credentials.", Severity.Error);
                return;
            }

            if (!user.IsActive)
            {
                Snackbar.Add("This account has been disabled. Contact an administrator for help.", Severity.Error);
                return;
            }

            var result = await SignInManager.PasswordSignInAsync(user.UserName!, _model.Password, _model.RememberMe, lockoutOnFailure: true);

            if (result.Succeeded)
            {
                user.LastLoginAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(user);
                Snackbar.Add("Welcome back!", Severity.Success);
                Navigation.NavigateTo(GetSafeReturnUrl(), true);
            }
            else if (result.IsLockedOut)
            {
                ShowLockout = true;
                Logger.LogWarning("User {UserId} locked out due to failed sign-in attempts.", user.Id);
            }
            else if (result.IsNotAllowed)
            {
                Snackbar.Add("This account is not allowed to sign in yet.", Severity.Error);
            }
            else
            {
                Snackbar.Add("Invalid credentials.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Sign-in failed due to unexpected error.");
            Snackbar.Add("An unexpected error occurred. Please try again.", Severity.Error);
        }
        finally
        {
            _isBusy = false;
        }
    }

    private sealed class LoginModel
    {
        [Required(ErrorMessage = "Email or username is required")]
        public string EmailOrUsername { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}
