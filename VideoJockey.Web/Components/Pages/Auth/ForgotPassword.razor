@page "/auth/forgot-password"
@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ILogger<ForgotPassword> Logger

<PageTitle>Reset Password - VideoJockey</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-6">
    <MudPaper Elevation="4" Class="pa-6">
        <MudText Typo="Typo.h5" Class="mb-2">Reset your password</MudText>
        <MudText Typo="Typo.body2" Class="mb-4">
            Enter the email address associated with your account. We'll generate a reset token you can use to create a new password.
        </MudText>

        <EditForm Model="_model" OnValidSubmit="HandleSubmitAsync">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value="_model.Email"
                          Label="Email address"
                          Variant="Variant.Outlined"
                          InputType="InputType.Email"
                          Required="true"
                          Disabled="_isProcessing" />

            <MudButton Type="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="_isProcessing"
                       Class="mt-4"
                       FullWidth="true">
                @if (_isProcessing)
                {
                    <MudProgressCircular Indeterminate Size="Size.Small" Class="mr-2" />
                    <span>Generating token...</span>
                }
                else
                {
                    <span>Generate reset token</span>
                }
            </MudButton>
        </EditForm>

        @if (!string.IsNullOrEmpty(_resetLink))
        {
            <MudAlert Severity="Severity.Info" Class="mt-4" Elevation="0">
                <MudText Typo="Typo.body2">
                    Copy this link to reset your password:
                </MudText>
                <MudText Typo="Typo.caption" Class="mt-2">
                    @_resetLink
                </MudText>
                <MudText Typo="Typo.caption" Class="mt-2">
                    Reset token (for advanced clients):
                </MudText>
                <MudText Typo="Typo.caption" Class="font-monospace">
                    @_resetToken
                </MudText>
            </MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private readonly ForgotPasswordModel _model = new();
    private bool _isProcessing;
    private string? _resetLink;
    private string? _resetToken;

    private async Task HandleSubmitAsync()
    {
        _isProcessing = true;
        _resetLink = null;
        _resetToken = null;

        try
        {
            var email = _model.Email?.Trim();
            if (string.IsNullOrWhiteSpace(email))
            {
                Snackbar.Add("Please provide an email address.", Severity.Warning);
                return;
            }

            var user = await UserManager.FindByEmailAsync(email);
            if (user is null)
            {
                Snackbar.Add("If an account exists for that email, a reset token has been generated.", Severity.Success);
                return;
            }

            var token = await UserManager.GeneratePasswordResetTokenAsync(user);
            _resetToken = token;

            var route = $"/auth/reset-password?email={Uri.EscapeDataString(email)}&token={Uri.EscapeDataString(token)}";
            _resetLink = Navigation.ToAbsoluteUri(route).ToString();

            Snackbar.Add("Reset token generated. Use the link below to continue.", Severity.Success);
            Logger.LogInformation("Password reset token generated for user {UserId}", user.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to generate reset token");
            Snackbar.Add("An error occurred while generating the token. Please try again.", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private sealed class ForgotPasswordModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
    }
}
